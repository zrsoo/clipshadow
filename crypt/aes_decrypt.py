from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

# Raw bytes from C++ `unsigned char[]`
embedded_config = bytes([
    0x98, 0x53, 0x8C, 0xD1, 0x2E, 0xEB, 0x24, 0xEF, 0x5E, 0xD4, 0xAB, 0xFB, 0x27, 0xA3, 0x5E, 0xC8,
    0xDA, 0x7A, 0xE6, 0x2A, 0xCB, 0x25, 0x43, 0x6B, 0x0B, 0x22, 0x6D, 0xCA, 0x30, 0xAB, 0x7F, 0x21,
    0xE1, 0xA2, 0xD3, 0x41, 0x86, 0x2D, 0x7B, 0x25, 0x05, 0xAE, 0xD3, 0x61, 0xB7, 0x30, 0x25, 0x0E,
    0x10, 0xD4, 0x19, 0x05, 0x1B, 0x77, 0x96, 0x88, 0x8D, 0xF4, 0x33, 0xB5, 0xC7, 0x32, 0x98, 0xE4,
    0xB8, 0x25, 0x2E, 0xFF, 0x42, 0x57, 0x22, 0x27, 0xBF, 0x15, 0x65, 0x9A, 0x28, 0x42, 0xF6, 0x67,
    0xDE, 0x10, 0xB1, 0x9E, 0xD5, 0x9C, 0x04, 0x5A, 0x8F, 0xF3, 0x8B, 0x28, 0x21, 0x27, 0xF1, 0x3A,
    0x9F, 0x77, 0xDB, 0x07, 0x04, 0xC5, 0x9C, 0x64, 0x61, 0xFF, 0xC6, 0x22, 0xDF, 0xA0, 0x03, 0xD8,
    0xF5, 0x00, 0x10, 0x26, 0xE0, 0xE2, 0x80, 0xFB, 0x46, 0xC9, 0x60, 0x5D, 0xA6, 0xC5, 0x9F, 0x29,
    0x95, 0x16, 0xD7
])

def decrypt_field(buf, offset, key):
    iv = buf[offset : offset + 16]
    length = buf[offset + 16]
    enc_data = buf[offset + 17 : offset + 17 + length]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = cipher.decrypt(enc_data)
    try:
        return unpad(decrypted, 16).decode(), offset + 17 + length
    except ValueError:
        return f"<invalid padding at {offset}>", offset + 17 + length

key = embedded_config[:32]
offset = 32

host, offset = decrypt_field(embedded_config, offset, key)
port, offset = decrypt_field(embedded_config, offset, key)
path, offset = decrypt_field(embedded_config, offset, key)

print("Decrypted host:", host)
print("Decrypted port:", port)
print("Decrypted path:", path)
