from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

# Raw bytes from C++ `unsigned char[]`
embedded_config = bytes([
    0x6F, 0x93, 0xEA, 0x8F, 0x89, 0x69, 0xBD, 0xD3, 0x20, 0xB1, 0x5B, 0x03, 0x17, 0x53, 0x36, 0x15, 0xEC, 0xAD, 0xDD, 0x12, 0x0B, 0xA8, 0xE5, 0x6B, 0xE2, 0x96, 0x34, 0xAF, 0xA8, 0x26, 0xB2, 0x74, 0x1F, 0x3F, 0xBE, 0xD2, 0xEB, 0xAC, 0x16, 0xA5, 0x27, 0x07, 0xB2, 0xD0, 0x19, 0xA8, 0x26, 0x6A, 0x10, 0x2A, 0x9E, 0x0F, 0xCF, 0x73, 0xC9, 0x80, 0x27, 0x81, 0x54, 0xE7, 0xED, 0x7B, 0x98, 0x49, 0x77, 0xFE, 0x60, 0x4A, 0xCA, 0x18, 0x69, 0x29, 0x9F, 0x67, 0x56, 0x36, 0x44, 0x99, 0x46, 0xB6, 0x20, 0x10, 0x28, 0x69, 0xB0, 0xDB, 0x0F, 0xC4, 0xC9, 0x30, 0x52, 0xD7, 0x8D, 0x92, 0x2F, 0x24, 0xC9, 0x16, 0x0F, 0x84, 0xB6, 0xEF, 0x14, 0x33, 0x4B, 0x49, 0x13, 0x05, 0x47, 0x01, 0x4B, 0xFC, 0x12, 0x73, 0x10, 0xF1, 0xAF, 0xA7, 0x0E, 0xFA, 0xFC, 0x04, 0x8A, 0x65, 0xF3, 0x4B, 0x67, 0x33, 0x80, 0xC8, 0x13
])

def decrypt_field(buf, offset, key):
    iv = buf[offset : offset + 16]
    length = buf[offset + 16]
    enc_data = buf[offset + 17 : offset + 17 + length]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = cipher.decrypt(enc_data)
    try:
        return unpad(decrypted, 16).decode(), offset + 17 + length
    except ValueError:
        return f"<invalid padding at {offset}>", offset + 17 + length

key = embedded_config[:32]
offset = 32

host, offset = decrypt_field(embedded_config, offset, key)
port, offset = decrypt_field(embedded_config, offset, key)
path, offset = decrypt_field(embedded_config, offset, key)

print("Decrypted host:", host)
print("Decrypted port:", port)
print("Decrypted path:", path)
