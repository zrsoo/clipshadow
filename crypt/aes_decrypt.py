from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

# Raw bytes from C++ `unsigned char[]`
embedded_config = bytes([
    0xFA, 0xD3, 0x08, 0x29, 0x99, 0x8F, 0x88, 0x2E, 0x61, 0xED, 0xD0, 0xED, 0x36, 0xC1, 0xD0, 0xD5, 0x41, 0xD5, 0xAF, 0x06, 0xE5, 0xE4, 0x78, 0x9A, 0x7B, 0x84, 0x0B, 0x18, 0x19, 0x35, 0xC7, 0x37, 0x54, 0xF5, 0xFC, 0x8C, 0xB8, 0x08, 0x69, 0x54, 0xFD, 0x4D, 0xC1, 0xEA, 0x5D, 0xFD, 0x7D, 0xA7, 0x10, 0x50, 0xB3, 0x7A, 0x08, 0x7A, 0xDC, 0x87, 0xDA, 0x7A, 0xF7, 0x27, 0x9B, 0xA9, 0x87, 0x72, 0x23, 0x23, 0x76, 0x49, 0x60, 0x20, 0x37, 0xF0, 0x20, 0x7C, 0x71, 0x8F, 0x5D, 0x2B, 0x04, 0x70, 0x6F, 0x10, 0x69, 0xFD, 0xE3, 0x59, 0x06, 0xE9, 0xF8, 0x7E, 0xD5, 0x8F, 0x60, 0xFE, 0x18, 0x4A, 0x06, 0x92, 0xC3, 0xF1, 0xA8, 0x14, 0xFD, 0xE8, 0x6A, 0xF4, 0x23, 0x1D, 0x50, 0x79, 0xDE, 0xD7, 0x07, 0x02, 0x10, 0x6D, 0xFC, 0x4F, 0x03, 0x20, 0xC9, 0xCB, 0x53, 0x15, 0xF1, 0x9D, 0xD7, 0x26, 0x4A, 0x4F, 0x7E
])

def decrypt_field(buf, offset, key):
    iv = buf[offset : offset + 16]
    length = buf[offset + 16]
    enc_data = buf[offset + 17 : offset + 17 + length]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = cipher.decrypt(enc_data)
    try:
        return unpad(decrypted, 16).decode(), offset + 17 + length
    except ValueError:
        return f"<invalid padding at {offset}>", offset + 17 + length

key = embedded_config[:32]
offset = 32

host, offset = decrypt_field(embedded_config, offset, key)
port, offset = decrypt_field(embedded_config, offset, key)
path, offset = decrypt_field(embedded_config, offset, key)

print("Decrypted host:", host)
print("Decrypted port:", port)
print("Decrypted path:", path)
